<?php

namespace Tests\Feature\Book;

use App\Models\Author;
use App\Models\Book;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Testing\File;
use Illuminate\Http\UploadedFile;
use Inertia\Testing\Assert;
use Tests\TestCase;

class CreateBookTest extends TestCase
{
    use RefreshDatabase;

    private File $coverImageUploadFake;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        \Storage::fake();
        $this->coverImageUploadFake = UploadedFile::fake()->image("cover.jpg");
    }

    private function validFields($overrides = []): array
    {
        return array_merge(
            [
                "title" => "BOOK TITLE",
                "author_id" => 1,
                "subtitle" => "BOOK SUBTITLE",
                "description" => "BOOK ABOUT SOMETHING",
                "preview" => "THE STORY BEGINS WHEN SOMETHING HAPPENS",
                "cover" => $this->coverImageUploadFake,
            ],
            $overrides
        );
    }

    /**
     * @test
     */
    public function guests_have_no_access_to_add_book_form()
    {
        $response = $this->get("/books/create");

        $response->assertStatus(302);
        $response->assertRedirect("/login");
    }

    /**
     * @test
     */
    public function users_have_no_access_to_add_book_form()
    {
        $user = User::factory()
            ->user()
            ->create();

        $response = $this->actingAs($user)->get("/books/create");

        $response->assertStatus(403);
    }

    /**
     * @test
     */
    public function admins_have_access_to_add_book_form()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $response = $this->actingAs($user)->get("/books/create");

        $response->assertStatus(200);

        $response->assertInertia(
            fn(Assert $page) => $page->component("Book/Create")
        );
    }

    /**
     * @test
     */
    public function guests_cannot_create_a_book()
    {
        $this->assertDatabaseCount("books", 0);

        $response = $this->post("/books", $this->validFields());

        $response->assertStatus(302);
        $response->assertRedirect("/login");

        $this->assertDatabaseCount("books", 0);
    }

    /**
     * @test
     */
    public function users_cannot_create_a_book()
    {
        $user = User::factory()
            ->user()
            ->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)->post(
            "/books",
            $this->validFields()
        );

        $response->assertStatus(403);

        $this->assertDatabaseCount("books", 0);
    }

    /**
     * @test
     */
    public function admins_can_create_a_book()
    {
        $user = User::factory()
            ->admin()
            ->create();

        Author::factory()->create(["id" => 1]);

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post("/books", $this->validFields());

        $response->assertStatus(302);
        $response->assertRedirect("/books");

        $this->assertDatabaseCount("books", 1);

        $filepath = "book-covers/" . $this->validFields()["cover"]->hashName();
        \Storage::assertExists($filepath);

        $book = Book::first();

        \Illuminate\Testing\Assert::assertArraySubset(
            $this->validFields(["cover" => $filepath]),
            $book->getAttributes()
        );
    }

    /**
     * @test
     */
    public function title_is_required()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $author = Author::factory()->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "title" => null,
                    "author_id" => $author->id,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books/create");

        $response->assertSessionHasErrors("title");

        $this->assertDatabaseCount("books", 0);
    }

    /**
     * @test
     */
    public function title_is_100_chars_max()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $author = Author::factory()->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "title" => str_repeat("A", 101),
                    "author_id" => $author->id,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books/create");

        $response->assertSessionHasErrors("title");

        $this->assertDatabaseCount("books", 0);
    }

    /**
     * @test
     */
    public function author_is_required()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "author_id" => null,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books/create");

        $response->assertSessionHasErrors("author_id");

        $this->assertDatabaseCount("books", 0);
    }

    /**
     * @test
     */
    public function author_exists()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $this->assertDatabaseCount("books", 0);
        $this->assertDatabaseCount("authors", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "author_id" => 1,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books/create");

        $response->assertSessionHasErrors("author_id");

        $this->assertDatabaseCount("books", 0);
    }

    /**
     * @test
     */
    public function subtitle_is_optional()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $author = Author::factory()->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "subtitle" => null,
                    "author_id" => $author->id,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books");

        $response->assertSessionDoesntHaveErrors("subtitle");

        $this->assertDatabaseCount("books", 1);
    }

    /**
     * @test
     */
    public function subtitle_is_200_chars_max()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $author = Author::factory()->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "subtitle" => str_repeat("A", 201),
                    "author_id" => $author->id,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books/create");

        $response->assertSessionHasErrors("subtitle");

        $this->assertDatabaseCount("books", 0);
    }

    /**
     * @test
     */
    public function description_is_optional()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $author = Author::factory()->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "description" => null,
                    "author_id" => $author->id,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books");

        $response->assertSessionDoesntHaveErrors("description");

        $this->assertDatabaseCount("books", 1);
    }

    /**
     * @test
     */
    public function description_is_2500_chars_max()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $author = Author::factory()->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "description" => str_repeat("A", 2501),
                    "author_id" => $author->id,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books/create");

        $response->assertSessionHasErrors("description");

        $this->assertDatabaseCount("books", 0);
    }

    /**
     * @test
     */
    public function preview_is_optional()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $author = Author::factory()->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "preview" => null,
                    "author_id" => $author->id,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books");

        $response->assertSessionDoesntHaveErrors("preview");

        $this->assertDatabaseCount("books", 1);
    }

    /**
     * @test
     */
    public function preview_is_2500_chars_max()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $author = Author::factory()->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "preview" => str_repeat("A", 2501),
                    "author_id" => $author->id,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books/create");

        $response->assertSessionHasErrors("preview");

        $this->assertDatabaseCount("books", 0);
    }

    /**
     * @test
     */
    public function cover_is_required()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $author = Author::factory()->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "cover" => null,
                    "author_id" => $author->id,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books/create");

        $response->assertSessionHasErrors("cover");

        $this->assertDatabaseCount("books", 0);
    }

    /**
     * @test
     */
    public function cover_is_an_image()
    {
        $user = User::factory()
            ->admin()
            ->create();

        $author = Author::factory()->create();

        $this->assertDatabaseCount("books", 0);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post(
                "/books",
                $this->validFields([
                    "cover" => "NOT AN IMAGE",
                    "author_id" => $author->id,
                ])
            );

        $response->assertStatus(302);
        $response->assertRedirect("/books/create");

        $response->assertSessionHasErrors("cover");

        $this->assertDatabaseCount("books", 0);
    }

    /**
     * @test
     */
    public function cover_is_resized()
    {
        $user = User::factory()
            ->admin()
            ->create();

        Author::factory()->create(["id" => 1]);

        $uploadedCover = UploadedFile::fake()->image("cover.jpg", 2560, 1440);

        $fullFileSize = filesize($uploadedCover);

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post("/books", $this->validFields(["cover" => $uploadedCover]));

        $response->assertStatus(302);
        $response->assertRedirect("/books");

        $filepath = "book-covers/" . $uploadedCover->hashName();
        \Storage::assertExists($filepath);

        $this->assertLessThan($fullFileSize, \Storage::size($filepath));

        list($width, $height) = getimagesizefromstring(
            \Storage::get($filepath)
        );

        $this->assertEquals(200, $width);
        $this->assertEquals(300, $height);
    }

    /**
     * @test
     */
    public function unsuccessful_file_upload()
    {
        $user = User::factory()
            ->admin()
            ->create();

        Author::factory()->create(["id" => 1]);

        $uploadedCover = UploadedFile::fake()->createWithContent(
            "cover.jpg",
            null
        );

        $response = $this->actingAs($user)
            ->from("/books/create")
            ->post("/books", $this->validFields(["cover" => $uploadedCover]));

        $response->assertStatus(500);
    }
}
